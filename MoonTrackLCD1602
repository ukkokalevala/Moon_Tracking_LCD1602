#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// WiFi credentials
const char* ssid = "yourSSID";
const char* password = "yourPASSWORD";

// NTP client setup
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 7200, 60000); // UTC+2 for Cape Town

// LCD 1602 I2C setup (I2C address might be 0x27 or 0x3F, depending on the module)
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Change 0x27 to 0x3F if needed

// Observer location (Cape Town coordinates)
const float observerLatitude = -34.136002;
const float observerLongitude = 18.430000;

void setup() {
    Serial.begin(115200);
    delay(1000);
    Serial.println("Starting Moon Orbit Tracking...");

    // Initialize LCD
    Wire.begin(D2, D1);
    lcd.begin(16, 02);
    lcd.backlight();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Moon Tracker");

    // Connect to WiFi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi");

    // Initialize NTP client
    timeClient.begin();
    Serial.println("NTP client initialized.");
}

void loop() {
    timeClient.update();

    // Get the current epoch time
    unsigned long epochTime = timeClient.getEpochTime();
    int year, month, day, hour, minute, second;
    convertEpochToDate(epochTime, year, month, day, hour, minute, second);

    // Calculate Moon position
    float azimuth, altitude;
    calculateMoonPosition(year, month, day, hour, minute, second, azimuth, altitude);

    // Display azimuth and altitude on the LCD
    lcd.clear();
    
    // Display azimuth
    lcd.setCursor(0, 0);
    lcd.print("Azimuth: ");
    lcd.print(azimuth, 1);

    // Display altitude with indication for above or below horizon
    lcd.setCursor(0, 1);
    lcd.print("Alt: ");
    lcd.print(altitude, 1);
    if (altitude >= 0) {
        lcd.print(" above");
    } else {
        lcd.print(" below");
    }

    delay(10000);  // Update every 10 seconds
}

void calculateMoonPosition(int year, int month, int day, int hour, int minute, int second, float &azimuth, float &altitude) {
    // Convert the date and time to Julian date
    float d = julianDate(year, month, day, hour, minute, second) - 2451545.0;

    // Mean longitude of the Moon
    float N = fmod(125.1228 - 0.0529538083 * d, 360.0);
    if (N < 0) N += 360.0;

    // Mean anomaly of the Moon
    float M = fmod(115.3654 + 13.0649929509 * d, 360.0);
    if (M < 0) M += 360.0;

    // Moon's ecliptic longitude
    float L = N + 6.289 * sin(radians(M)); // Corrected longitude

    // Right ascension (RA) and declination (Dec) of the Moon
    float RA = atan2(cos(radians(L)), sin(radians(L))) * 180.0 / PI;
    float Dec = asin(sin(radians(L)) * sin(radians(5.145))) * 180.0 / PI;

    // Local sidereal time (approximate)
    float GMST = fmod(280.46061837 + 360.98564736629 * d, 360.0);
    float LST = GMST + observerLongitude;
    if (LST < 0) LST += 360.0;

    // Hour angle
    float HA = fmod(LST - RA, 360.0);
    if (HA < 0) HA += 360.0;

    // Altitude and azimuth
    altitude = asin(sin(radians(observerLatitude)) * sin(radians(Dec)) + cos(radians(observerLatitude)) * cos(radians(Dec)) * cos(radians(HA))) * 180.0 / PI;
    azimuth = atan2(-sin(radians(HA)), tan(radians(Dec)) * cos(radians(observerLatitude)) - sin(radians(observerLatitude)) * cos(radians(HA))) * 180.0 / PI;
    if (azimuth < 0) azimuth += 360.0;
}

float julianDate(int year, int month, int day, int hour, int minute, int second) {
    if (month <= 2) {
        year -= 1;
        month += 12;
    }
    int A = year / 100;
    int B = 2 - A + A / 4;
    return int(365.25 * (year + 4716)) + int(30.6001 * (month + 1)) + day + B - 1524.5 + (hour + minute / 60.0 + second / 3600.0) / 24.0;
}

bool isLeapYear(int year) {
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}

void convertEpochToDate(unsigned long epoch, int &year, int &month, int &day, int &hour, int &minute, int &second) {
    epoch += 3600 * 2;  // Adjust for Cape Town's UTC+2 time zone
    hour = (epoch % 86400L) / 3600;
    minute = (epoch % 3600) / 60;
    second = epoch % 60;

    int days = epoch / 86400L;
    year = 1970;

    static const int monthDays[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

    while (days >= (isLeapYear(year) ? 366 : 365)) {
        days -= isLeapYear(year) ? 366 : 365;
        year++;
    }

    for (month = 0; month < 12; month++) {
        int daysInMonth = monthDays[month];
        if (month == 1 && isLeapYear(year)) daysInMonth = 29;

        if (days < daysInMonth) break;
        days -= daysInMonth;
    }
    day = days + 1;
}
